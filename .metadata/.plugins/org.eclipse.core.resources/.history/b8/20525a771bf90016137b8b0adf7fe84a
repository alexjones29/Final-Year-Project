package main;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.Stack;

public class CrackerApplication
{

	List cipherText = new ArrayList<CipherSymbol>();

	public CrackerApplication() 
	{
		
	}
	
	public void readInCiphertext()
	{
		CiphertextReader cipherReader = new CiphertextReader();
		File cipher = new File("resources/340cipherascii.txt");
		cipherText = cipherReader.readInCipherText(cipher);
		testTrie();
	}
	
	public void testTrie()
	{
		Trie trie = new Trie();
		trie.insert("table");
		trie.insert("word");
		trie.insert("an");
		trie.insert("ant");
		trie.insert("anchor");
		trie.insert("tear");
		trie.insert("try");
		trie.insert("rude");
		trie.insert("boy");
		trie.insert("sound");
		trie.insert("sorted");
		trie.insert("bed");
		
		TrieHandler handler = new TrieHandler();
		String str = "able";
		ArrayList<Character> chars = new ArrayList<Character>();
		for (char c : str.toCharArray()) {
		  chars.add(c);
		}

		int wagwan = handler.computeMinimumLevenshteinDistance(chars, trie);
		System.out.println(wagwan);
		
		
		
	}
	
	public void main(String[] args) throws IOException {
	    // load the dictionary into a set for fast lookups
	    Set<String> dictionary = new HashSet<String>();
	    Scanner filescan = new Scanner(new File("dictionary.txt"));
	    while (filescan.hasNext()) {
	        dictionary.add(filescan.nextLine().toLowerCase());
	    }

	    // scan for input
	    Scanner scan = new Scanner(System.in);
	    System.out.print("Enter a string: ");
	    String input = scan.next().toLowerCase();
	    System.out.println();

	    // place to store list of results, each result is a list of strings
	    List<List<String>> results = new ArrayList<List<String>>();

	    long time = System.currentTimeMillis();

	    // start the search, pass empty stack to represent words found so far
	    search(input, dictionary, new Stack<String>(), results);

	    time = System.currentTimeMillis() - time;

	    // list the results found
	    for (List<String> result : results) {
	        for (String word : result) {
	            System.out.print(word + " ");
	        }
	        System.out.println("(" + result.size() + " words)");
	    }
	    System.out.println();
	    System.out.println("Took " + time + "ms");
	}

	public void search(String input, Set<String> dictionary,
	        Stack<String> words, List<List<String>> results) {

	    for (int i = 0; i < input.length(); i++) {
	        // take the first i characters of the input and see if it is a word
	        String substring = input.substring(0, i + 1);

	        if (dictionary.contains(substring)) {
	            // the beginning of the input matches a word, store on stack
	            words.push(substring);

	            if (i == input.length() - 1) {
	                // there's no input left, copy the words stack to results
	                results.add(new ArrayList<String>(words));
	            } else {
	                // there's more input left, search the remaining part
	                search(input.substring(i + 1), dictionary, words, results);
	            }

	            // pop the matched word back off so we can move onto the next i
	            words.pop();
	        }
	    }
	}

	public void readInDictionary()
	{

	}
}
